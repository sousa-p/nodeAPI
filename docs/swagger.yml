openapi: '3.0.2'
info:
  title: Node Store API
  version: '1.0'
components:
  securitySchemes:
    JWT:
      type: apiKey
      in: header
      name: Authorization
paths:
  /:
    get:
      responses:
        '200':
          description: OK
  /product/:
    get:
      tags:
        - Product
      description: 'Get all products:'
      parameters: []
      responses:
        '200':
          description: OK
    post:
      tags:
        - Product
      description: 'Create a product:'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                price:
                  type: number
                  minimum: 0
                description:
                  type: string
                active:
                  type: boolean
                slug:
                  type: string
      security:
        - JWT: []
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
        '401':
          description: RESTRICTED ACCESS ERROR
  /product/id/{id}:
    delete:
      tags:
        - Product
      description: 'Delete one product with ID:'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: THe product ID 
      responses:
        '200':
          description: OK
    put:
      tags:
        - Product
      description: 'Update one product with ID:'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: THe product ID 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                price:
                  type: number
                  minimum: 0
                description:
                  type: string
                slug:
                  type: string
      responses:
        '200':
          description: OK
  /customer/:
    get:
      tags:
        - Customer
      description: Get all Customers
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
    post:
      tags:
        - Customer
      description: Create new Customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
  /customer/login:
    post:
        tags:
          - Customer
        description: Login Customer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string
        responses:
          '200':
            description: OK
          '400':
            description: ERROR
  /customer/id/{id}:
    get:
      tags:
        - Customer
      description: Get one Customer by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
  /order/:
    get:
      tags:
        - Order
      description: Get all orders
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
    post:
      tags:
        - Order
      description: Create new Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer:
                  type: string
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      quantity:
                        type: integer
                        minimum: 1
                      price:
                        type: number
                        minimum: 0
                      product:
                        type: string
      responses:
        '200':
          description: OK
        '400':
          description: ERROR
